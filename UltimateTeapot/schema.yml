openapi: 3.0.3
info:
  title: Ultimate Teapot API
  version: 1.0.0
  description: This API documentation describes the requests that can be made to our
    social media platform "Ultimate Teapot"
paths:
  /main/api/authors/:
    get:
      operationId: main_api_authors_retrieve
      description: retrieve all profiles on the server (paginated)
      tags:
      - Authors
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /main/api/authors/{id}/:
    get:
      operationId: main_api_authors_retrieve_2
      description: ' retrieve ID’s profile'
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Authors
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    post:
      operationId: main_api_authors_create
      description: update ID’s profile
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
            examples:
              Request:
                value: curl -u POST https://ultimate-teapot.herokuapp.com/main/api/authors/{id}
                summary: request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /main/api/authors/{id}/followers/:
    get:
      operationId: main_api_authors_followers_retrieve
      description: get a list of authors who are ID's followers
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Followers
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /main/api/authors/{id}/followers/{fid}/:
    get:
      operationId: main_api_authors_followers_retrieve_2
      description: check if FID is a follower of ID
      parameters:
      - in: path
        name: fid
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Followers
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: main_api_authors_followers_create
      description: 'Add FID as a follower of ID '
      parameters:
      - in: path
        name: fid
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Followers
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: main_api_authors_followers_destroy
      description: remove FID as a follower of ID
      parameters:
      - in: path
        name: fid
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Followers
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /main/api/authors/{id}/inbox/:
    get:
      operationId: main_api_authors_inbox_retrieve
      description: 'if authenticated get a list of posts sent to ID '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Inbox
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: ''
    post:
      operationId: main_api_authors_inbox_create
      description: 'send a object to the author ID, object can be of type like, comment,
        post, follow '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Inbox
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inbox'
            examples:
              Request:
                value: curl -u POST https://ultimate-teapot.herokuapp.com/main/api/authors/{id}/inbox/
                summary: request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inbox'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Inbox'
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: ''
    delete:
      operationId: main_api_authors_inbox_destroy
      description: clear the inbox
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Inbox
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /main/api/authors/{id}/liked/:
    get:
      operationId: main_api_authors_liked_retrieve
      description: list what public things Author ID liked
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Likes
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /main/api/authors/{id}/posts/:
    get:
      operationId: main_api_authors_posts_list
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - main
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostsList'
          description: ''
    post:
      operationId: main_api_authors_posts_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - main
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Posts'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Posts'
        required: true
      security:
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
          description: ''
  /main/api/authors/{id}/posts/{pid}/:
    get:
      operationId: main_api_authors_posts_retrieve
      description: get the public post whose id is PID
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Posts
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: main_api_authors_posts_create_2
      description: update the post whose id is PID (must be authenticated)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            examples:
              Request:
                value: curl -u POST https://ultimate-teapot.herokuapp.com/main/api/authors/{id}/posts/{pid}
                summary: request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: main_api_authors_posts_update
      description: create a post where its id is PID
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            examples:
              Request:
                value: curl -u PUT https://ultimate-teapot.herokuapp.com/main/api/authors/{id}/posts/{pid}
                summary: request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: main_api_authors_posts_destroy
      description: remove the post whose id is PID
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Posts
      security:
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /main/api/authors/{id}/posts/{pid}/comments/:
    get:
      operationId: main_api_authors_posts_comments_retrieve
      description: get the list of comments of the post whose id is PID (paginated)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Comments
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: main_api_authors_posts_comments_create
      description: ' if you post an object of “type”:”comment”, it will add your comment
        to the post whose id is PID'
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Comments
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /main/api/authors/{id}/posts/{pid}/comments/{cid}/likes/:
    get:
      operationId: main_api_authors_posts_comments_likes_retrieve
      description: ' a list of likes from other authors on ID’s post PID comment CID'
      parameters:
      - in: path
        name: cid
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Likes
      security:
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /main/api/authors/{id}/posts/{pid}/image/:
    get:
      operationId: main_api_authors_posts_image_retrieve
      description: 'get the public post converted to binary as an image '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Posts
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostImage'
          description: ''
  /main/api/authors/{id}/posts/{pid}/likes/:
    get:
      operationId: main_api_authors_posts_likes_retrieve
      description: a list of likes from other authors on ID's post PID
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: pid
        schema:
          type: string
        required: true
      tags:
      - Likes
      security:
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLike'
          description: ''
components:
  schemas:
    Inbox:
      type: object
      properties:
        type:
          type: string
          readOnly: true
      required:
      - type
    PaginatedPostsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Posts'
    Post:
      type: object
      properties:
        type:
          type: string
          readOnly: true
        title:
          type: string
        id:
          type: string
          readOnly: true
        source:
          type: string
          readOnly: true
        origin:
          type: string
          readOnly: true
        description:
          type: string
        contentType:
          type: string
        content:
          type: string
        author:
          allOf:
          - $ref: '#/components/schemas/Profile'
          readOnly: true
        categories:
          type: string
          readOnly: true
        count:
          type: integer
          readOnly: true
        comments:
          type: string
          readOnly: true
        published:
          type: string
          format: date-time
          readOnly: true
        visibility:
          type: string
          maxLength: 10
        unlisted:
          type: boolean
      required:
      - author
      - categories
      - comments
      - content
      - contentType
      - count
      - description
      - id
      - origin
      - published
      - source
      - title
      - type
    PostImage:
      type: object
      properties:
        content:
          type: string
      required:
      - content
    PostLike:
      type: object
      properties:
        type:
          type: string
          readOnly: true
      required:
      - type
    Posts:
      type: object
      properties:
        type:
          type: string
          readOnly: true
        title:
          type: string
        id:
          type: string
          readOnly: true
        source:
          type: string
          readOnly: true
        origin:
          type: string
          readOnly: true
        description:
          type: string
        contentType:
          type: string
          maxLength: 100
        content:
          type: string
        author:
          allOf:
          - $ref: '#/components/schemas/Profile'
          readOnly: true
        categories:
          type: string
          readOnly: true
        count:
          type: integer
          readOnly: true
        comments:
          type: string
          readOnly: true
        published:
          type: string
          format: date-time
          readOnly: true
        visibility:
          type: string
          maxLength: 10
        unlisted:
          type: boolean
      required:
      - author
      - categories
      - comments
      - content
      - contentType
      - count
      - id
      - origin
      - published
      - source
      - title
      - type
    Profile:
      type: object
      properties:
        type:
          type: string
          readOnly: true
        id:
          type: string
          maxLength: 100
        url:
          type: string
          format: uri
          maxLength: 200
        host:
          type: string
          format: uri
          maxLength: 200
        displayName:
          type: string
          maxLength: 100
        github:
          type: string
          format: uri
          maxLength: 200
        profileImage:
          type: string
          format: uri
          maxLength: 200
      required:
      - displayName
      - github
      - host
      - id
      - type
      - url
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
tags:
- Post
- Author
- Like
- Comment
